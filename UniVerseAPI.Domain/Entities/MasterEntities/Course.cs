// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Diagnostics.CodeAnalysis;
using System.Runtime.CompilerServices;
using Microsoft.EntityFrameworkCore;
using UniVerseAPI.Domain.Enums;

namespace UniVerseAPI.Infra.Data.Context
{
    public partial class Course : BaseEntity
    {
        private string _fullName;

        public Guid Id { get; private set; }
        public string FullName {
            get => _fullName;
            set { FullName = value == null ? FullName : value; }
        }
        public string ShortDescription { get; set; }
        public string Description { get; set; }
        public DateTime StartDate { get; set; }
        public DateTime EndDate { get; set; }
        public int Seats { get; set; }
        public int SpotsAvailable { get; set; }
        public int Price { get; set; }
        public CourseCategory Category { get; set; }
        public string Code { get; set; }

        [InverseProperty("Course")]
        public virtual ICollection<Student> Student { get; set; }

        [InverseProperty("Course")]
        public virtual ICollection<Subject> Subject { get; set; }

        public Course()
        {
            Id = Guid.NewGuid();
            CreationDate = DateTime.Now;
            LastUpdate = DateTime.Now;
        }

        public Course(Guid id, string fullName, string shortDescription, string description, DateTime startDate, DateTime endDate, int seats, int spotsAvailable, int price, CourseCategory category, string code, ICollection<Student> student, ICollection<Subject> subject)
        {
            Id = id;
            FullName = fullName ?? throw new ArgumentNullException(nameof(fullName));
            ShortDescription = shortDescription ?? throw new ArgumentNullException(nameof(shortDescription));
            Description = description ?? throw new ArgumentNullException(nameof(description));
            StartDate = startDate;
            EndDate = endDate;
            Seats = seats;
            SpotsAvailable = spotsAvailable;
            Price = price;
            Category = category;
            Code = code ?? throw new ArgumentNullException(nameof(code));
            Student = student ?? throw new ArgumentNullException(nameof(student));
            Subject = subject ?? throw new ArgumentNullException(nameof(subject));
        }
    }
}